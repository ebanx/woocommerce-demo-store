/*--------------------------------------------------------------
6.0 - Forms
--------------------------------------------------------------*/


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

::-webkit-input-placeholder {
  color: @input-color;
}

:-moz-placeholder {
  color: @input-color;
}

::-moz-placeholder {
  color: @input-color;
}

:-ms-input-placeholder {
  color: @input-color;
}
fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: @line-height-computed;
  line-height: inherit;
  color: @legend-color;
  border: 0;
  border-bottom: 1px solid @legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  .box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: ((4px / @font-size-root) + @font-unit) 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}
select{
  -webkit-appearance: select;
  -webkit-border-radius: 0px !important;
}
// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  .tab-focus();
}

// Adjust output element
output {
  display: block;
  padding-top: (@padding-base-vertical + 1);
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
}


.form-control {
  display: block;
  width: 100%;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-base-vertical @padding-base-horizontal;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid @input-border;
  text-transform: uppercase;
  font-weight: @headings-font-weight;
  font-size: ((13px/@font-size-root) + @font-unit);
  .border-radius(@input-border-radius);
  outline: none;
  .form-control-focus();
  .transition(~"border-color 0.3s, box-shadow 0.3s");
  // Placeholder
  //.placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: @input-bg-disabled;
    .opacity(1); // iOS fix for unreadable disabled content
  }

  // Reset height for `textarea`s
  textarea& {
    height: auto;
  }
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned.
// As a workaround, we set a pixel line-height that matches the
// given height of the input. Since this fucks up everything else, we have to
// appropriately reset it for Internet Explorer and the size variations.

input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
  line-height: @input-height-base;
  // IE8+ misaligns the text within date inputs, so we reset
  line-height: @line-height-base ~"\0";

  &.input-sm {
    line-height: @input-height-small;
  }
  &.input-lg {
    line-height: @input-height-large;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: @grid-gutter-width / 2;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  min-height: @line-height-computed; // clear the floating input if there is no label text
  margin-top: ((10px / @font-size-root) + @font-unit);
  margin-bottom: ((10px / @font-size-root) + @font-unit);

  label {
    padding-left: ((20px / @font-size-root) + @font-unit);
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: ((-20px / @font-size-root) + @font-unit);
  margin-top: 4px \9;
  .dh-ie &{
    position: relative \9;
  }
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: ((-5px / @font-size-root) + @font-unit); // Move up sibling radios or checkboxes for tighter spacing
}



// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: not-allowed;
    }
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

.input-sm {
  .input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small);
}

.input-lg {
  .input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @border-radius-large);
}
.form-flat-checkbox{
  margin: 0;
  cursor: pointer;
  display: block;
  position: relative;
  padding: 0 0 0 30px;
  .dh-ie &{
    padding: 0;
  }
  input{
    //left: -9999px;
    position: absolute;
    visibility: hidden;
    .opacity(0);
    .dh-ie &{
      position: relative; 
      left: auto;
      visibility: visible;
      .opacity(1);
    }
  }
  i{
    .dh-ie &{
      display: none;
    }
    background: none repeat scroll 0 0 #fff;
    border-style: solid;
    border-width: 1px;
    display: block;
    height: 18px;
    left: 0;
    outline: medium none;
    position: absolute;
    top: 5px;
    border-color: @input-border;
    width: 18px;
    top: 50%;
    margin-top: -9px;
    color: @input-border-focus;
    &:after{
      .opacity(0);
      .transition(opacity 0.1s ease 0s);
    }
  }
  input:checked{
    + i{
      &:after{
        .opacity(1);
      }
    }
  }
}

.form-flat-radio {
  margin: 0;
  cursor: pointer;
  display: block;
  position: relative;
  padding: 0 0 0 30px;
  .dh-ie &{
    padding: 0;
  }
  input{
    left: -9999px;
    position: absolute;
    .dh-ie &{
      position: relative; 
      left: auto;
    }
  }
  i{
    .dh-ie &{
      display: none;
    }
    background: none repeat scroll 0 0 #fff;
    border-style: solid;
    border-width: 1px;
    display: block;
    height: 18px;
    left: 0;
    outline: medium none;
    position: absolute;
    top: 5px;
    border-color: @headings-color;
    width: 18px;
    top: 50%;
    margin-top: -9px;
    color: @input-border-focus;
    &:after{
      .opacity(0);
      .transition(opacity 0.1s ease 0s);
    }
  }
  input:checked{
    + i{
      border-width: 4px;
    }
  }
}

.form-flat-radio{
  i{
    .border-radius(50%);
    &:after{
      .border-radius(50%);
      content: "";
      height: 8px;
      left: 4px;
      top: 4px;
      line-height: 1;
      width: 8px;
      position: absolute;
      background: @input-border-focus;
    }
  }
}
.form-flat-checkbox{
  i{
    .add-fa-icon-after("\f00c");
    &:after{
      font-size: 12px;
      height: 17px;
      left: -1px;
      text-align: center;
      position: absolute;
      top: 50%;
      .translate(0,-50%);
      margin-top: 2px;
      width: 17px;
      .opacity(0);
      line-height: 1;
    }
  }
}
.form-flat-select{
  position: relative;
  display: block;
  i{
    height: 100%;
    line-height: @input-height-base;
    padding: 0 1em;
    position: absolute;
    right: 0;
    top: 0;
    pointer-events: none;
    color: @headings-color;
    .dh-ie &{ 
      display: none;
    }
  }
  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    -ms-appearance: none;
    -o-appearance: none;
    appearance: none;
    .box-shadow(none);
    .border-radius(0);
    padding: 0.5em 3em 0.5em 1.5em;
    padding-right: 2em \9;
    border: 1px solid @input-border;
    outline: none;
    background: none;
    position: relative;
    z-index: 1;
    height: @input-height-base;
    text-transform: uppercase;
    font-weight: @headings-font-weight;
    color: @gray;
    font-size: ((13px/@font-size-root) + @font-unit);
    option{
      outline: none;
    }
  }
}